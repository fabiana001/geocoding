// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package generated

import scala.concurrent.Future


/**
usage:
val obj = scalaxb.fromXML[generated.Foo](node)
val document = scalaxb.toXML[generated.Foo](obj, "foo", generated.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  implicit lazy val executionContext = scala.concurrent.ExecutionContext.Implicits.global

  val defaultScope = scalaxb.toScope(Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val Generated_Datiu45identificativiFormat: scalaxb.XMLFormat[generated.Datiu45identificativi] = new DefaultGenerated_Datiu45identificativiFormat {}
  implicit lazy val Generated_Formau45giuridicaFormat: scalaxb.XMLFormat[generated.Formau45giuridica] = new DefaultGenerated_Formau45giuridicaFormat {}
  implicit lazy val Generated_Indirizzou45localizzazioneFormat: scalaxb.XMLFormat[generated.Indirizzou45localizzazione] = new DefaultGenerated_Indirizzou45localizzazioneFormat {}
  implicit lazy val Generated_Tipiu45procedureu45concorsualiFormat: scalaxb.XMLFormat[generated.Tipiu45procedureu45concorsuali] = new DefaultGenerated_Tipiu45procedureu45concorsualiFormat {}
  implicit lazy val Generated_Tipou45procedurau45concorsualeFormat: scalaxb.XMLFormat[generated.Tipou45procedurau45concorsuale] = new DefaultGenerated_Tipou45procedurau45concorsualeFormat {}
  implicit lazy val Generated_Albiu45ruoliu45licenzeu45ridottiFormat: scalaxb.XMLFormat[generated.Albiu45ruoliu45licenzeu45ridotti] = new DefaultGenerated_Albiu45ruoliu45licenzeu45ridottiFormat {}
  implicit lazy val Generated_Amministrazioneu45controlloFormat: scalaxb.XMLFormat[generated.Amministrazioneu45controllo] = new DefaultGenerated_Amministrazioneu45controlloFormat {}
  implicit lazy val Generated_Anagraficau45titolareFormat: scalaxb.XMLFormat[generated.Anagraficau45titolare] = new DefaultGenerated_Anagraficau45titolareFormat {}
  implicit lazy val Generated_Attiu45conferimentou45caricheFormat: scalaxb.XMLFormat[generated.Attiu45conferimentou45cariche] = new DefaultGenerated_Attiu45conferimentou45caricheFormat {}
  implicit lazy val Generated_Attivitau45prevalenteFormat: scalaxb.XMLFormat[generated.Attivitau45prevalente] = new DefaultGenerated_Attivitau45prevalenteFormat {}
  implicit lazy val Generated_Attou45conferimentou45caricheFormat: scalaxb.XMLFormat[generated.Attou45conferimentou45cariche] = new DefaultGenerated_Attou45conferimentou45caricheFormat {}
  implicit lazy val Generated_Blocchiu45impresaFormat: scalaxb.XMLFormat[generated.Blocchiu45impresa] = new DefaultGenerated_Blocchiu45impresaFormat {}
  implicit lazy val Generated_Capitaleu45investitoFormat: scalaxb.XMLFormat[generated.Capitaleu45investito] = new DefaultGenerated_Capitaleu45investitoFormat {}
  implicit lazy val Generated_Capitaleu45socialeFormat: scalaxb.XMLFormat[generated.Capitaleu45sociale] = new DefaultGenerated_Capitaleu45socialeFormat {}
  implicit lazy val Generated_CaricaFormat: scalaxb.XMLFormat[generated.Carica] = new DefaultGenerated_CaricaFormat {}
  implicit lazy val Generated_CaricheFormat: scalaxb.XMLFormat[generated.Cariche] = new DefaultGenerated_CaricheFormat {}
  implicit lazy val Generated_Classificazioneu45atecoFormat: scalaxb.XMLFormat[generated.Classificazioneu45ateco] = new DefaultGenerated_Classificazioneu45atecoFormat {}
  implicit lazy val Generated_Classificazioniu45atecoFormat: scalaxb.XMLFormat[generated.Classificazioniu45ateco] = new DefaultGenerated_Classificazioniu45atecoFormat {}
  implicit lazy val Generated_Collegiou45sindacaleFormat: scalaxb.XMLFormat[generated.Collegiou45sindacale] = new DefaultGenerated_Collegiou45sindacaleFormat {}
  implicit lazy val Generated_Composizioneu45quoteFormat: scalaxb.XMLFormat[generated.Composizioneu45quote] = new DefaultGenerated_Composizioneu45quoteFormat {}
  implicit lazy val Generated_DeliberatoFormat: scalaxb.XMLFormat[generated.Deliberato] = new DefaultGenerated_DeliberatoFormat {}
  implicit lazy val Generated_DescrizioniFormat: scalaxb.XMLFormat[generated.Descrizioni] = new DefaultGenerated_DescrizioniFormat {}
  implicit lazy val Generated_Dirittou45partecipazioneFormat: scalaxb.XMLFormat[generated.Dirittou45partecipazione] = new DefaultGenerated_Dirittou45partecipazioneFormat {}
  implicit lazy val Generated_Duratau45societaFormat: scalaxb.XMLFormat[generated.Duratau45societa] = new DefaultGenerated_Duratau45societaFormat {}
  implicit lazy val Generated_Elencou45sociFormat: scalaxb.XMLFormat[generated.Elencou45soci] = new DefaultGenerated_Elencou45sociFormat {}
  implicit lazy val Generated_Estremiu45nascitaFormat: scalaxb.XMLFormat[generated.Estremiu45nascita] = new DefaultGenerated_Estremiu45nascitaFormat {}
  implicit lazy val Generated_Fondou45consortileFormat: scalaxb.XMLFormat[generated.Fondou45consortile] = new DefaultGenerated_Fondou45consortileFormat {}
  implicit lazy val Generated_Formau45amministrativaFormat: scalaxb.XMLFormat[generated.Formau45amministrativa] = new DefaultGenerated_Formau45amministrativaFormat {}
  implicit lazy val Generated_Formeu45amministrativeFormat: scalaxb.XMLFormat[generated.Formeu45amministrative] = new DefaultGenerated_Formeu45amministrativeFormat {}
  implicit lazy val Generated_Infou45attivitaFormat: scalaxb.XMLFormat[generated.Infou45attivita] = new DefaultGenerated_Infou45attivitaFormat {}
  implicit lazy val Generated_Infou45patrimonialiu45finanziarieFormat: scalaxb.XMLFormat[generated.Infou45patrimonialiu45finanziarie] = new DefaultGenerated_Infou45patrimonialiu45finanziarieFormat {}
  implicit lazy val Generated_Infou45statutoFormat: scalaxb.XMLFormat[generated.Infou45statuto] = new DefaultGenerated_Infou45statutoFormat {}
  implicit lazy val Generated_LicenzaFormat: scalaxb.XMLFormat[generated.Licenza] = new DefaultGenerated_LicenzaFormat {}
  implicit lazy val Generated_Licenzau45autorizzazioneFormat: scalaxb.XMLFormat[generated.Licenzau45autorizzazione] = new DefaultGenerated_Licenzau45autorizzazioneFormat {}
  implicit lazy val Generated_LicenzeFormat: scalaxb.XMLFormat[generated.Licenze] = new DefaultGenerated_LicenzeFormat {}
  implicit lazy val Generated_LocalizzazioneFormat: scalaxb.XMLFormat[generated.Localizzazione] = new DefaultGenerated_LocalizzazioneFormat {}
  implicit lazy val Generated_LocalizzazioniFormat: scalaxb.XMLFormat[generated.Localizzazioni] = new DefaultGenerated_LocalizzazioniFormat {}
  implicit lazy val Generated_PersonaFormat: scalaxb.XMLFormat[generated.Persona] = new DefaultGenerated_PersonaFormat {}
  implicit lazy val Generated_Personau45fisicaFormat: scalaxb.XMLFormat[generated.Personau45fisica] = new DefaultGenerated_Personau45fisicaFormat {}
  implicit lazy val Generated_Personau45giuridicaFormat: scalaxb.XMLFormat[generated.Personau45giuridica] = new DefaultGenerated_Personau45giuridicaFormat {}
  implicit lazy val Generated_Personeu45sedeFormat: scalaxb.XMLFormat[generated.Personeu45sede] = new DefaultGenerated_Personeu45sedeFormat {}
  implicit lazy val Generated_Poteriu45personaFormat: scalaxb.XMLFormat[generated.Poteriu45persona] = new DefaultGenerated_Poteriu45personaFormat {}
  implicit lazy val Generated_Praticau45soggettiu45controllantiFormat: scalaxb.XMLFormat[generated.Praticau45soggettiu45controllanti] = new DefaultGenerated_Praticau45soggettiu45controllantiFormat {}
  implicit lazy val Generated_Praticheu45soggettiu45controllantiFormat: scalaxb.XMLFormat[generated.Praticheu45soggettiu45controllanti] = new DefaultGenerated_Praticheu45soggettiu45controllantiFormat {}
  implicit lazy val Generated_RiquadriFormat: scalaxb.XMLFormat[generated.Riquadri] = new DefaultGenerated_RiquadriFormat {}
  implicit lazy val Generated_Riquadriu45trasferimentoFormat: scalaxb.XMLFormat[generated.Riquadriu45trasferimento] = new DefaultGenerated_Riquadriu45trasferimentoFormat {}
  implicit lazy val Generated_RiquadroFormat: scalaxb.XMLFormat[generated.Riquadro] = new DefaultGenerated_RiquadroFormat {}
  implicit lazy val Generated_Riquadrou45trasferimentoFormat: scalaxb.XMLFormat[generated.Riquadrou45trasferimento] = new DefaultGenerated_Riquadrou45trasferimentoFormat {}
  implicit lazy val Generated_Ruoliu45ridottiFormat: scalaxb.XMLFormat[generated.Ruoliu45ridotti] = new DefaultGenerated_Ruoliu45ridottiFormat {}
  implicit lazy val Generated_Ruolou45ridottoFormat: scalaxb.XMLFormat[generated.Ruolou45ridotto] = new DefaultGenerated_Ruolou45ridottoFormat {}
  implicit lazy val Generated_Scadenzau45eserciziFormat: scalaxb.XMLFormat[generated.Scadenzau45esercizi] = new DefaultGenerated_Scadenzau45eserciziFormat {}
  implicit lazy val Generated_Scrittau45pcou45sFormat: scalaxb.XMLFormat[generated.Scrittau45pcou45s] = new DefaultGenerated_Scrittau45pcou45sFormat {}
  implicit lazy val Generated_Sedeu45fuoriu45provinciaFormat: scalaxb.XMLFormat[generated.Sedeu45fuoriu45provincia] = new DefaultGenerated_Sedeu45fuoriu45provinciaFormat {}
  implicit lazy val Generated_Sistemau45amministrazioneFormat: scalaxb.XMLFormat[generated.Sistemau45amministrazione] = new DefaultGenerated_Sistemau45amministrazioneFormat {}
  implicit lazy val Generated_Soggettiu45controllantiFormat: scalaxb.XMLFormat[generated.Soggettiu45controllanti] = new DefaultGenerated_Soggettiu45controllantiFormat {}
  implicit lazy val Generated_Soggettou45controllanteFormat: scalaxb.XMLFormat[generated.Soggettou45controllante] = new DefaultGenerated_Soggettou45controllanteFormat {}
  implicit lazy val Generated_Soggettou45controllou45contabileFormat: scalaxb.XMLFormat[generated.Soggettou45controllou45contabile] = new DefaultGenerated_Soggettou45controllou45contabileFormat {}
  implicit lazy val Generated_Sottou45tipiFormat: scalaxb.XMLFormat[generated.Sottou45tipi] = new DefaultGenerated_Sottou45tipiFormat {}
  implicit lazy val Generated_Sottou45tipoFormat: scalaxb.XMLFormat[generated.Sottou45tipo] = new DefaultGenerated_Sottou45tipoFormat {}
  implicit lazy val Generated_SottoscrittoFormat: scalaxb.XMLFormat[generated.Sottoscritto] = new DefaultGenerated_SottoscrittoFormat {}
  implicit lazy val Generated_TitolareFormat: scalaxb.XMLFormat[generated.Titolare] = new DefaultGenerated_TitolareFormat {}
  implicit lazy val Generated_TitolariFormat: scalaxb.XMLFormat[generated.Titolari] = new DefaultGenerated_TitolariFormat {}
  implicit lazy val Generated_Trasferimentiu45quoteFormat: scalaxb.XMLFormat[generated.Trasferimentiu45quote] = new DefaultGenerated_Trasferimentiu45quoteFormat {}
  implicit lazy val Generated_Trasferimentou45quoteFormat: scalaxb.XMLFormat[generated.Trasferimentou45quote] = new DefaultGenerated_Trasferimentou45quoteFormat {}
  implicit lazy val Generated_Valoreu45nominaleu45conferimentiFormat: scalaxb.XMLFormat[generated.Valoreu45nominaleu45conferimenti] = new DefaultGenerated_Valoreu45nominaleu45conferimentiFormat {}
  implicit lazy val Generated_VersatoFormat: scalaxb.XMLFormat[generated.Versato] = new DefaultGenerated_VersatoFormat {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("versato"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Versato](elem)))
      case (Some("trasferimento-quote"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Trasferimentou45quote](elem)))
      case (Some("titolari"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Titolari](elem)))
      case (Some("sottoscritto"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Sottoscritto](elem)))
      case (Some("sotto-tipi"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Sottou45tipi](elem)))
      case (Some("soggetto-controllante"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Soggettou45controllante](elem)))
      case (Some("sistema-amministrazione"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Sistemau45amministrazione](elem)))
      case (Some("scritta-pco-s"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Scrittau45pcou45s](elem)))
      case (Some("ruolo-ridotto"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Ruolou45ridotto](elem)))
      case (Some("riquadro-trasferimento"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Riquadrou45trasferimento](elem)))
      case (Some("riquadri-trasferimento"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Riquadriu45trasferimento](elem)))
      case (Some("pratiche-soggetti-controllanti"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Praticheu45soggettiu45controllanti](elem)))
      case (Some("poteri-persona"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Poteriu45persona](elem)))
      case (Some("persona-giuridica"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Personau45giuridica](elem)))
      case (Some("persona"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Persona](elem)))
      case (Some("localizzazione"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Localizzazione](elem)))
      case (Some("licenza-autorizzazione"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Licenzau45autorizzazione](elem)))
      case (Some("info-statuto"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Infou45statuto](elem)))
      case (Some("info-attivita"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Infou45attivita](elem)))
      case (Some("forma-amministrativa"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Formau45amministrativa](elem)))
      case (Some("estremi-nascita"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Estremiu45nascita](elem)))
      case (Some("durata-societa"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Duratau45societa](elem)))
      case (Some("descrizioni"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Descrizioni](elem)))
      case (Some("deliberato"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Deliberato](elem)))
      case (Some("collegio-sindacale"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Collegiou45sindacale](elem)))
      case (Some("classificazione-ateco"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Classificazioneu45ateco](elem)))
      case (Some("carica"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Carica](elem)))
      case (Some("capitale-investito"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Capitaleu45investito](elem)))
      case (Some("atto-conferimento-cariche"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Attou45conferimentou45cariche](elem)))
      case (Some("attivita-prevalente"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Attivitau45prevalente](elem)))
      case (Some("atti-conferimento-cariche"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Attiu45conferimentou45cariche](elem)))
      case (Some("amministrazione-controllo"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Amministrazioneu45controllo](elem)))
      case (Some("tipo-procedura-concorsuale"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Tipou45procedurau45concorsuale](elem)))
      case (Some("indirizzo-posta-certificata"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[String](elem)))
      case (Some("forma-giuridica"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Formau45giuridica](elem)))
      case (Some("dati-identificativi"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Datiu45identificativi](elem)))
      case (Some("indirizzo-localizzazione"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Indirizzou45localizzazione](elem)))
      case (Some("tipi-procedure-concorsuali"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Tipiu45procedureu45concorsuali](elem)))
      case (Some("albi-ruoli-licenze-ridotti"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Albiu45ruoliu45licenzeu45ridotti](elem)))
      case (Some("anagrafica-titolare"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Anagraficau45titolare](elem)))
      case (Some("attivita-esercitata"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[String](elem)))
      case (Some("attivita-secondaria-esercitata"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[String](elem)))
      case (Some("blocchi-impresa"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Blocchiu45impresa](elem)))
      case (Some("capitale-sociale"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Capitaleu45sociale](elem)))
      case (Some("cariche"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Cariche](elem)))
      case (Some("classificazioni-ateco"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Classificazioniu45ateco](elem)))
      case (Some("composizione-quote"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Composizioneu45quote](elem)))
      case (Some("descrizione"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[String](elem)))
      case (Some("diritto-partecipazione"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Dirittou45partecipazione](elem)))
      case (Some("elenco-soci"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Elencou45soci](elem)))
      case (Some("fondo-consortile"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Fondou45consortile](elem)))
      case (Some("forme-amministrative"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Formeu45amministrative](elem)))
      case (Some("info-patrimoniali-finanziarie"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Infou45patrimonialiu45finanziarie](elem)))
      case (Some("licenza"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Licenza](elem)))
      case (Some("licenze"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Licenze](elem)))
      case (Some("localizzazioni"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Localizzazioni](elem)))
      case (Some("persona-fisica"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Personau45fisica](elem)))
      case (Some("persone-sede"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Personeu45sede](elem)))
      case (Some("pratica-soggetti-controllanti"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Praticau45soggettiu45controllanti](elem)))
      case (Some("riquadri"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Riquadri](elem)))
      case (Some("riquadro"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Riquadro](elem)))
      case (Some("ruoli-ridotti"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Ruoliu45ridotti](elem)))
      case (Some("scadenza-esercizi"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Scadenzau45esercizi](elem)))
      case (Some("sede-fuori-provincia"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Sedeu45fuoriu45provincia](elem)))
      case (Some("soggetti-controllanti"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Soggettiu45controllanti](elem)))
      case (Some("soggetto-controllo-contabile"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Soggettou45controllou45contabile](elem)))
      case (Some("sotto-tipo"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Sottou45tipo](elem)))
      case (Some("titolare"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Titolare](elem)))
      case (Some("trasferimenti-quote"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Trasferimentiu45quote](elem)))
      case (Some("valore-nominale-conferimenti"), None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated.Valoreu45nominaleu45conferimenti](elem)))

      case _ => None
    }
  }

  trait DefaultGenerated_Datiu45identificativiFormat extends scalaxb.ElemNameParser[generated.Datiu45identificativi] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Datiu45identificativi] =
      phrase(opt(scalaxb.ElemName(None, "tipi-procedure-concorsuali")) ~ 
      opt(scalaxb.ElemName(None, "forma-giuridica")) ~ 
      opt(scalaxb.ElemName(None, "indirizzo-localizzazione")) ~ 
      opt(scalaxb.ElemName(None, "indirizzo-posta-certificata")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated.Datiu45identificativi(p1.headOption map { scalaxb.fromXML[generated.Tipiu45procedureu45concorsuali](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated.Formau45giuridica](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated.Indirizzou45localizzazione](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@c-fonte").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-fonte" -> _ },
        (node \ "@fonte").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@fonte" -> _ },
        (node \ "@tipo-soggetto").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@tipo-soggetto" -> _ },
        (node \ "@descrizione-tipo-soggetto").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@descrizione-tipo-soggetto" -> _ },
        (node \ "@tipo-impresa").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@tipo-impresa" -> _ },
        (node \ "@descrizione-tipo-impresa").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@descrizione-tipo-impresa" -> _ },
        (node \ "@stato-impresa").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@stato-impresa" -> _ },
        (node \ "@stato-ditta").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@stato-ditta" -> _ },
        (node \ "@dt-iscrizione-ri").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@dt-iscrizione-ri" -> _ },
        (node \ "@dt-iscrizione-rea").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@dt-iscrizione-rea" -> _ },
        (node \ "@dt-atto-costituzione").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@dt-atto-costituzione" -> _ },
        (node \ "@dt-costituzione").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@dt-costituzione" -> _ },
        (node \ "@dt-cancellazione").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@dt-cancellazione" -> _ },
        (node \ "@dt-cessazione").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@dt-cessazione" -> _ },
        (node \ "@c-causale-cess").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-causale-cess" -> _ },
        (node \ "@causale-cess").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@causale-cess" -> _ },
        (node \ "@denominazione").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@denominazione" -> _ },
        (node \ "@c-fiscale").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-fiscale" -> _ },
        (node \ "@partita-iva").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@partita-iva" -> _ },
        (node \ "@cciaa").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@cciaa" -> _ },
        (node \ "@n-rea").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@n-rea" -> _ },
        (node \ "@n-rd").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@n-rd" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated.Datiu45identificativi, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@c-fonte", _) => __obj.cu45fonte foreach { x => attr = scala.xml.Attribute(null, "c-fonte", x.toString, attr) }
        case ("@fonte", _) => __obj.fonte foreach { x => attr = scala.xml.Attribute(null, "fonte", x.toString, attr) }
        case ("@tipo-soggetto", _) => __obj.tipou45soggetto foreach { x => attr = scala.xml.Attribute(null, "tipo-soggetto", x.toString, attr) }
        case ("@descrizione-tipo-soggetto", _) => __obj.descrizioneu45tipou45soggetto foreach { x => attr = scala.xml.Attribute(null, "descrizione-tipo-soggetto", x.toString, attr) }
        case ("@tipo-impresa", _) => __obj.tipou45impresa foreach { x => attr = scala.xml.Attribute(null, "tipo-impresa", x.toString, attr) }
        case ("@descrizione-tipo-impresa", _) => __obj.descrizioneu45tipou45impresa foreach { x => attr = scala.xml.Attribute(null, "descrizione-tipo-impresa", x.toString, attr) }
        case ("@stato-impresa", _) => __obj.statou45impresa foreach { x => attr = scala.xml.Attribute(null, "stato-impresa", x.toString, attr) }
        case ("@stato-ditta", _) => __obj.statou45ditta foreach { x => attr = scala.xml.Attribute(null, "stato-ditta", x.toString, attr) }
        case ("@dt-iscrizione-ri", _) => __obj.dtu45iscrizioneu45ri foreach { x => attr = scala.xml.Attribute(null, "dt-iscrizione-ri", x.toString, attr) }
        case ("@dt-iscrizione-rea", _) => __obj.dtu45iscrizioneu45rea foreach { x => attr = scala.xml.Attribute(null, "dt-iscrizione-rea", x.toString, attr) }
        case ("@dt-atto-costituzione", _) => __obj.dtu45attou45costituzione foreach { x => attr = scala.xml.Attribute(null, "dt-atto-costituzione", x.toString, attr) }
        case ("@dt-costituzione", _) => __obj.dtu45costituzione foreach { x => attr = scala.xml.Attribute(null, "dt-costituzione", x.toString, attr) }
        case ("@dt-cancellazione", _) => __obj.dtu45cancellazione foreach { x => attr = scala.xml.Attribute(null, "dt-cancellazione", x.toString, attr) }
        case ("@dt-cessazione", _) => __obj.dtu45cessazione foreach { x => attr = scala.xml.Attribute(null, "dt-cessazione", x.toString, attr) }
        case ("@c-causale-cess", _) => __obj.cu45causaleu45cess foreach { x => attr = scala.xml.Attribute(null, "c-causale-cess", x.toString, attr) }
        case ("@causale-cess", _) => __obj.causaleu45cess foreach { x => attr = scala.xml.Attribute(null, "causale-cess", x.toString, attr) }
        case ("@denominazione", _) => __obj.denominazione foreach { x => attr = scala.xml.Attribute(null, "denominazione", x.toString, attr) }
        case ("@c-fiscale", _) => __obj.cu45fiscale foreach { x => attr = scala.xml.Attribute(null, "c-fiscale", x.toString, attr) }
        case ("@partita-iva", _) => __obj.partitau45iva foreach { x => attr = scala.xml.Attribute(null, "partita-iva", x.toString, attr) }
        case ("@cciaa", _) => __obj.cciaa foreach { x => attr = scala.xml.Attribute(null, "cciaa", x.toString, attr) }
        case ("@n-rea", _) => __obj.nu45rea foreach { x => attr = scala.xml.Attribute(null, "n-rea", x.toString, attr) }
        case ("@n-rd", _) => __obj.nu45rd foreach { x => attr = scala.xml.Attribute(null, "n-rd", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Datiu45identificativi, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.tipiu45procedureu45concorsuali map { scalaxb.toXML[generated.Tipiu45procedureu45concorsuali](_, None, Some("tipi-procedure-concorsuali"), __scope, false) } getOrElse {Nil},
        __obj.formau45giuridica map { scalaxb.toXML[generated.Formau45giuridica](_, None, Some("forma-giuridica"), __scope, false) } getOrElse {Nil},
        __obj.indirizzou45localizzazione map { scalaxb.toXML[generated.Indirizzou45localizzazione](_, None, Some("indirizzo-localizzazione"), __scope, false) } getOrElse {Nil},
        __obj.indirizzou45postau45certificata map { scalaxb.toXML[String](_, None, Some("indirizzo-posta-certificata"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated_Formau45giuridicaFormat extends scalaxb.XMLFormat[generated.Formau45giuridica] with scalaxb.CanWriteChildNodes[generated.Formau45giuridica] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Formau45giuridica] = seq match {
      case node: scala.xml.Node => Right(generated.Formau45giuridica(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@c").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Formau45giuridica, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@c", _) => __obj.c foreach { x => attr = scala.xml.Attribute(null, "c", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Formau45giuridica, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated_Indirizzou45localizzazioneFormat extends scalaxb.XMLFormat[generated.Indirizzou45localizzazione] with scalaxb.CanWriteChildNodes[generated.Indirizzou45localizzazione] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Indirizzou45localizzazione] = seq match {
      case node: scala.xml.Node => Right(generated.Indirizzou45localizzazione(scala.collection.immutable.ListMap(List(
        (node \ "@c-comune").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-comune" -> _ },
        (node \ "@comune").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@comune" -> _ },
        (node \ "@provincia").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@provincia" -> _ },
        (node \ "@c-toponimo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-toponimo" -> _ },
        (node \ "@toponimo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@toponimo" -> _ },
        (node \ "@via").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@via" -> _ },
        (node \ "@n-civico").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@n-civico" -> _ },
        (node \ "@cap").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@cap" -> _ },
        (node \ "@c-stato").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-stato" -> _ },
        (node \ "@stato").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@stato" -> _ },
        (node \ "@frazione").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@frazione" -> _ },
        (node \ "@altre-indicazioni").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@altre-indicazioni" -> _ },
        (node \ "@c-stradario").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-stradario" -> _ },
        (node \ "@c-zona").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-zona" -> _ },
        (node \ "@f-sede-presso-terzi").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@f-sede-presso-terzi" -> _ },
        (node \ "@lat").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lat" -> _ },
        (node \ "@lng").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lng" -> _ },
        (node \ "@geocodingService").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@geocodingService" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Indirizzou45localizzazione, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@c-comune", _) => __obj.cu45comune foreach { x => attr = scala.xml.Attribute(null, "c-comune", x.toString, attr) }
        case ("@comune", _) => __obj.comune foreach { x => attr = scala.xml.Attribute(null, "comune", x.toString, attr) }
        case ("@provincia", _) => __obj.provincia foreach { x => attr = scala.xml.Attribute(null, "provincia", x.toString, attr) }
        case ("@c-toponimo", _) => __obj.cu45toponimo foreach { x => attr = scala.xml.Attribute(null, "c-toponimo", x.toString, attr) }
        case ("@toponimo", _) => __obj.toponimo foreach { x => attr = scala.xml.Attribute(null, "toponimo", x.toString, attr) }
        case ("@via", _) => __obj.via foreach { x => attr = scala.xml.Attribute(null, "via", x.toString, attr) }
        case ("@n-civico", _) => __obj.nu45civico foreach { x => attr = scala.xml.Attribute(null, "n-civico", x.toString, attr) }
        case ("@cap", _) => __obj.cap foreach { x => attr = scala.xml.Attribute(null, "cap", x.toString, attr) }
        case ("@c-stato", _) => __obj.cu45stato foreach { x => attr = scala.xml.Attribute(null, "c-stato", x.toString, attr) }
        case ("@stato", _) => __obj.stato foreach { x => attr = scala.xml.Attribute(null, "stato", x.toString, attr) }
        case ("@frazione", _) => __obj.frazione foreach { x => attr = scala.xml.Attribute(null, "frazione", x.toString, attr) }
        case ("@altre-indicazioni", _) => __obj.altreu45indicazioni foreach { x => attr = scala.xml.Attribute(null, "altre-indicazioni", x.toString, attr) }
        case ("@c-stradario", _) => __obj.cu45stradario foreach { x => attr = scala.xml.Attribute(null, "c-stradario", x.toString, attr) }
        case ("@c-zona", _) => __obj.cu45zona foreach { x => attr = scala.xml.Attribute(null, "c-zona", x.toString, attr) }
        case ("@f-sede-presso-terzi", _) => __obj.fu45sedeu45pressou45terzi foreach { x => attr = scala.xml.Attribute(null, "f-sede-presso-terzi", x.toString, attr) }
        case ("@lat", _) => __obj.lat foreach { x => attr = scala.xml.Attribute(null, "lat", x.toString, attr) }
        case ("@lng", _) => __obj.lng foreach { x => attr = scala.xml.Attribute(null, "lng", x.toString, attr) }
        case ("@geocodingService", _) => __obj.geocodingService foreach { x => attr = scala.xml.Attribute(null, "geocodingService", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Indirizzou45localizzazione, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultGenerated_Tipiu45procedureu45concorsualiFormat extends scalaxb.ElemNameParser[generated.Tipiu45procedureu45concorsuali] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Tipiu45procedureu45concorsuali] =
      phrase(safeRep(scalaxb.ElemName(None, "tipo-procedura-concorsuale")) ^^
      { case p1 =>
      generated.Tipiu45procedureu45concorsuali(p1 map { scalaxb.fromXML[generated.Tipou45procedurau45concorsuale](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.Tipiu45procedureu45concorsuali, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.tipou45procedurau45concorsuale flatMap { scalaxb.toXML[generated.Tipou45procedurau45concorsuale](_, None, Some("tipo-procedura-concorsuale"), __scope, false) })

  }

  trait DefaultGenerated_Tipou45procedurau45concorsualeFormat extends scalaxb.XMLFormat[generated.Tipou45procedurau45concorsuale] with scalaxb.CanWriteChildNodes[generated.Tipou45procedurau45concorsuale] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Tipou45procedurau45concorsuale] = seq match {
      case node: scala.xml.Node => Right(generated.Tipou45procedurau45concorsuale(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@c-tipo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-tipo" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Tipou45procedurau45concorsuale, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@c-tipo", _) => __obj.cu45tipo foreach { x => attr = scala.xml.Attribute(null, "c-tipo", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Tipou45procedurau45concorsuale, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated_Albiu45ruoliu45licenzeu45ridottiFormat extends scalaxb.ElemNameParser[generated.Albiu45ruoliu45licenzeu45ridotti] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Albiu45ruoliu45licenzeu45ridotti] =
      phrase(opt(scalaxb.ElemName(None, "ruoli-ridotti")) ~ 
      opt(scalaxb.ElemName(None, "licenze")) ^^
      { case p1 ~ p2 =>
      generated.Albiu45ruoliu45licenzeu45ridotti(p1.headOption map { scalaxb.fromXML[generated.Ruoliu45ridotti](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated.Licenze](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.Albiu45ruoliu45licenzeu45ridotti, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ruoliu45ridotti map { scalaxb.toXML[generated.Ruoliu45ridotti](_, None, Some("ruoli-ridotti"), __scope, false) } getOrElse {Nil},
        __obj.licenze map { scalaxb.toXML[generated.Licenze](_, None, Some("licenze"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated_Amministrazioneu45controlloFormat extends scalaxb.ElemNameParser[generated.Amministrazioneu45controllo] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Amministrazioneu45controllo] =
      phrase(opt(scalaxb.ElemName(None, "sistema-amministrazione")) ~ 
      opt(scalaxb.ElemName(None, "soggetto-controllo-contabile")) ~ 
      opt(scalaxb.ElemName(None, "forme-amministrative")) ~ 
      opt(scalaxb.ElemName(None, "collegio-sindacale")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated.Amministrazioneu45controllo(p1.headOption map { scalaxb.fromXML[generated.Sistemau45amministrazione](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated.Soggettou45controllou45contabile](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated.Formeu45amministrative](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated.Collegiou45sindacale](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.Amministrazioneu45controllo, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.sistemau45amministrazione map { scalaxb.toXML[generated.Sistemau45amministrazione](_, None, Some("sistema-amministrazione"), __scope, false) } getOrElse {Nil},
        __obj.soggettou45controllou45contabile map { scalaxb.toXML[generated.Soggettou45controllou45contabile](_, None, Some("soggetto-controllo-contabile"), __scope, false) } getOrElse {Nil},
        __obj.formeu45amministrative map { scalaxb.toXML[generated.Formeu45amministrative](_, None, Some("forme-amministrative"), __scope, false) } getOrElse {Nil},
        __obj.collegiou45sindacale map { scalaxb.toXML[generated.Collegiou45sindacale](_, None, Some("collegio-sindacale"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated_Anagraficau45titolareFormat extends scalaxb.XMLFormat[generated.Anagraficau45titolare] with scalaxb.CanWriteChildNodes[generated.Anagraficau45titolare] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Anagraficau45titolare] = seq match {
      case node: scala.xml.Node => Right(generated.Anagraficau45titolare(scala.collection.immutable.ListMap(List(
        (node \ "@c-tipo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-tipo" -> _ },
        (node \ "@tipo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@tipo" -> _ },
        (node \ "@c-fiscale").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-fiscale" -> _ },
        (node \ "@c-cittadinanza").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-cittadinanza" -> _ },
        (node \ "@cittadinanza").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@cittadinanza" -> _ },
        (node \ "@denominazione").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@denominazione" -> _ },
        (node \ "@denominazione-denunciata").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@denominazione-denunciata" -> _ },
        (node \ "@cognome").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@cognome" -> _ },
        (node \ "@nome").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@nome" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Anagraficau45titolare, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@c-tipo", _) => __obj.cu45tipo foreach { x => attr = scala.xml.Attribute(null, "c-tipo", x.toString, attr) }
        case ("@tipo", _) => __obj.tipo foreach { x => attr = scala.xml.Attribute(null, "tipo", x.toString, attr) }
        case ("@c-fiscale", _) => __obj.cu45fiscale foreach { x => attr = scala.xml.Attribute(null, "c-fiscale", x.toString, attr) }
        case ("@c-cittadinanza", _) => __obj.cu45cittadinanza foreach { x => attr = scala.xml.Attribute(null, "c-cittadinanza", x.toString, attr) }
        case ("@cittadinanza", _) => __obj.cittadinanza foreach { x => attr = scala.xml.Attribute(null, "cittadinanza", x.toString, attr) }
        case ("@denominazione", _) => __obj.denominazione foreach { x => attr = scala.xml.Attribute(null, "denominazione", x.toString, attr) }
        case ("@denominazione-denunciata", _) => __obj.denominazioneu45denunciata foreach { x => attr = scala.xml.Attribute(null, "denominazione-denunciata", x.toString, attr) }
        case ("@cognome", _) => __obj.cognome foreach { x => attr = scala.xml.Attribute(null, "cognome", x.toString, attr) }
        case ("@nome", _) => __obj.nome foreach { x => attr = scala.xml.Attribute(null, "nome", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Anagraficau45titolare, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultGenerated_Attiu45conferimentou45caricheFormat extends scalaxb.ElemNameParser[generated.Attiu45conferimentou45cariche] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Attiu45conferimentou45cariche] =
      phrase(safeRep(scalaxb.ElemName(None, "atto-conferimento-cariche")) ^^
      { case p1 =>
      generated.Attiu45conferimentou45cariche(p1 map { scalaxb.fromXML[generated.Attou45conferimentou45cariche](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.Attiu45conferimentou45cariche, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.attou45conferimentou45cariche flatMap { scalaxb.toXML[generated.Attou45conferimentou45cariche](_, None, Some("atto-conferimento-cariche"), __scope, false) })

  }

  trait DefaultGenerated_Attivitau45prevalenteFormat extends scalaxb.XMLFormat[generated.Attivitau45prevalente] with scalaxb.CanWriteChildNodes[generated.Attivitau45prevalente] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Attivitau45prevalente] = seq match {
      case node: scala.xml.Node => Right(generated.Attivitau45prevalente(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@f-attivita-non-iniziata").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@f-attivita-non-iniziata" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Attivitau45prevalente, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@f-attivita-non-iniziata", _) => __obj.fu45attivitau45nonu45iniziata foreach { x => attr = scala.xml.Attribute(null, "f-attivita-non-iniziata", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Attivitau45prevalente, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated_Attou45conferimentou45caricheFormat extends scalaxb.ElemNameParser[generated.Attou45conferimentou45cariche] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Attou45conferimentou45cariche] =
      phrase(opt(scalaxb.ElemName(None, "cariche")) ~ 
      opt(scalaxb.ElemName(None, "poteri-persona")) ^^
      { case p1 ~ p2 =>
      generated.Attou45conferimentou45cariche(p1.headOption map { scalaxb.fromXML[generated.Cariche](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated.Poteriu45persona](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.Attou45conferimentou45cariche, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.cariche map { scalaxb.toXML[generated.Cariche](_, None, Some("cariche"), __scope, false) } getOrElse {Nil},
        __obj.poteriu45persona map { scalaxb.toXML[generated.Poteriu45persona](_, None, Some("poteri-persona"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated_Blocchiu45impresaFormat extends scalaxb.ElemNameParser[generated.Blocchiu45impresa] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Blocchiu45impresa] =
      phrase(safeRep(((scalaxb.ElemName(None, "dati-identificativi")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated.Datiu45identificativi](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(None, "info-attivita")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated.Infou45attivita](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(None, "albi-ruoli-licenze-ridotti")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated.Albiu45ruoliu45licenzeu45ridotti](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(None, "persone-sede")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated.Personeu45sede](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(None, "localizzazioni")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated.Localizzazioni](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(None, "elenco-soci")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated.Elencou45soci](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(None, "trasferimenti-quote")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated.Trasferimentiu45quote](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(None, "pratiche-soggetti-controllanti")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated.Praticheu45soggettiu45controllanti](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(None, "info-statuto")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated.Infou45statuto](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(None, "amministrazione-controllo")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated.Amministrazioneu45controllo](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(None, "info-patrimoniali-finanziarie")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated.Infou45patrimonialiu45finanziarie](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(None, "scritta-pco-s")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated.Scrittau45pcou45s](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      generated.Blocchiu45impresa(p1) })
    
    def writesChildNodes(__obj: generated.Blocchiu45impresa, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.blocchiu45impresaoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[generated.Blocchiu45impresaOption]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultGenerated_Capitaleu45investitoFormat extends scalaxb.XMLFormat[generated.Capitaleu45investito] with scalaxb.CanWriteChildNodes[generated.Capitaleu45investito] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Capitaleu45investito] = seq match {
      case node: scala.xml.Node => Right(generated.Capitaleu45investito(scala.collection.immutable.ListMap(List(
        (node \ "@c-valuta").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-valuta" -> _ },
        (node \ "@valuta").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@valuta" -> _ },
        (node \ "@ammontare").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ammontare" -> _ },
        (node \ "@ammontare-convertito-in-euro").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ammontare-convertito-in-euro" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Capitaleu45investito, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@c-valuta", _) => __obj.cu45valuta foreach { x => attr = scala.xml.Attribute(null, "c-valuta", x.toString, attr) }
        case ("@valuta", _) => __obj.valuta foreach { x => attr = scala.xml.Attribute(null, "valuta", x.toString, attr) }
        case ("@ammontare", _) => __obj.ammontare foreach { x => attr = scala.xml.Attribute(null, "ammontare", x.toString, attr) }
        case ("@ammontare-convertito-in-euro", _) => __obj.ammontareu45convertitou45inu45euro foreach { x => attr = scala.xml.Attribute(null, "ammontare-convertito-in-euro", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Capitaleu45investito, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultGenerated_Capitaleu45socialeFormat extends scalaxb.ElemNameParser[generated.Capitaleu45sociale] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Capitaleu45sociale] =
      phrase(opt(scalaxb.ElemName(None, "deliberato")) ~ 
      opt(scalaxb.ElemName(None, "sottoscritto")) ~ 
      opt(scalaxb.ElemName(None, "versato")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated.Capitaleu45sociale(p1.headOption map { scalaxb.fromXML[generated.Deliberato](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated.Sottoscritto](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated.Versato](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@c-valuta").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-valuta" -> _ },
        (node \ "@valuta").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@valuta" -> _ },
        (node \ "@ammontare").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ammontare" -> _ },
        (node \ "@n-azioni").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@n-azioni" -> _ },
        (node \ "@n-quote").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@n-quote" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated.Capitaleu45sociale, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@c-valuta", _) => __obj.cu45valuta foreach { x => attr = scala.xml.Attribute(null, "c-valuta", x.toString, attr) }
        case ("@valuta", _) => __obj.valuta foreach { x => attr = scala.xml.Attribute(null, "valuta", x.toString, attr) }
        case ("@ammontare", _) => __obj.ammontare foreach { x => attr = scala.xml.Attribute(null, "ammontare", x.toString, attr) }
        case ("@n-azioni", _) => __obj.nu45azioni foreach { x => attr = scala.xml.Attribute(null, "n-azioni", x.toString, attr) }
        case ("@n-quote", _) => __obj.nu45quote foreach { x => attr = scala.xml.Attribute(null, "n-quote", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Capitaleu45sociale, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.deliberato map { scalaxb.toXML[generated.Deliberato](_, None, Some("deliberato"), __scope, false) } getOrElse {Nil},
        __obj.sottoscritto map { scalaxb.toXML[generated.Sottoscritto](_, None, Some("sottoscritto"), __scope, false) } getOrElse {Nil},
        __obj.versato map { scalaxb.toXML[generated.Versato](_, None, Some("versato"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated_CaricaFormat extends scalaxb.XMLFormat[generated.Carica] with scalaxb.CanWriteChildNodes[generated.Carica] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Carica] = seq match {
      case node: scala.xml.Node => Right(generated.Carica(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@c-carica").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-carica" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Carica, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@c-carica", _) => __obj.cu45carica foreach { x => attr = scala.xml.Attribute(null, "c-carica", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Carica, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated_CaricheFormat extends scalaxb.ElemNameParser[generated.Cariche] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Cariche] =
      phrase(safeRep(scalaxb.ElemName(None, "carica")) ^^
      { case p1 =>
      generated.Cariche(p1 map { scalaxb.fromXML[generated.Carica](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.Cariche, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.carica flatMap { scalaxb.toXML[generated.Carica](_, None, Some("carica"), __scope, false) })

  }

  trait DefaultGenerated_Classificazioneu45atecoFormat extends scalaxb.XMLFormat[generated.Classificazioneu45ateco] with scalaxb.CanWriteChildNodes[generated.Classificazioneu45ateco] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Classificazioneu45ateco] = seq match {
      case node: scala.xml.Node => Right(generated.Classificazioneu45ateco(scala.collection.immutable.ListMap(List(
        (node \ "@c-attivita").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-attivita" -> _ },
        (node \ "@attivita").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@attivita" -> _ },
        (node \ "@c-importanza").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-importanza" -> _ },
        (node \ "@importanza").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@importanza" -> _ },
        (node \ "@dt-inizio").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@dt-inizio" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Classificazioneu45ateco, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@c-attivita", _) => __obj.cu45attivita foreach { x => attr = scala.xml.Attribute(null, "c-attivita", x.toString, attr) }
        case ("@attivita", _) => __obj.attivita foreach { x => attr = scala.xml.Attribute(null, "attivita", x.toString, attr) }
        case ("@c-importanza", _) => __obj.cu45importanza foreach { x => attr = scala.xml.Attribute(null, "c-importanza", x.toString, attr) }
        case ("@importanza", _) => __obj.importanza foreach { x => attr = scala.xml.Attribute(null, "importanza", x.toString, attr) }
        case ("@dt-inizio", _) => __obj.dtu45inizio foreach { x => attr = scala.xml.Attribute(null, "dt-inizio", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Classificazioneu45ateco, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultGenerated_Classificazioniu45atecoFormat extends scalaxb.ElemNameParser[generated.Classificazioniu45ateco] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Classificazioniu45ateco] =
      phrase(safeRep(scalaxb.ElemName(None, "classificazione-ateco")) ^^
      { case p1 =>
      generated.Classificazioniu45ateco(p1 map { scalaxb.fromXML[generated.Classificazioneu45ateco](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@c-codifica").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-codifica" -> _ },
        (node \ "@codifica").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@codifica" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated.Classificazioniu45ateco, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@c-codifica", _) => __obj.cu45codifica foreach { x => attr = scala.xml.Attribute(null, "c-codifica", x.toString, attr) }
        case ("@codifica", _) => __obj.codifica foreach { x => attr = scala.xml.Attribute(null, "codifica", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Classificazioniu45ateco, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.classificazioneu45ateco flatMap { scalaxb.toXML[generated.Classificazioneu45ateco](_, None, Some("classificazione-ateco"), __scope, false) })

  }

  trait DefaultGenerated_Collegiou45sindacaleFormat extends scalaxb.XMLFormat[generated.Collegiou45sindacale] with scalaxb.CanWriteChildNodes[generated.Collegiou45sindacale] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Collegiou45sindacale] = seq match {
      case node: scala.xml.Node => Right(generated.Collegiou45sindacale(scala.collection.immutable.ListMap(List(
        (node \ "@n-effettivi").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@n-effettivi" -> _ },
        (node \ "@n-supplenti").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@n-supplenti" -> _ },
        (node \ "@n-min").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@n-min" -> _ },
        (node \ "@n-max").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@n-max" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Collegiou45sindacale, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@n-effettivi", _) => __obj.nu45effettivi foreach { x => attr = scala.xml.Attribute(null, "n-effettivi", x.toString, attr) }
        case ("@n-supplenti", _) => __obj.nu45supplenti foreach { x => attr = scala.xml.Attribute(null, "n-supplenti", x.toString, attr) }
        case ("@n-min", _) => __obj.nu45min foreach { x => attr = scala.xml.Attribute(null, "n-min", x.toString, attr) }
        case ("@n-max", _) => __obj.nu45max foreach { x => attr = scala.xml.Attribute(null, "n-max", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Collegiou45sindacale, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultGenerated_Composizioneu45quoteFormat extends scalaxb.XMLFormat[generated.Composizioneu45quote] with scalaxb.CanWriteChildNodes[generated.Composizioneu45quote] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Composizioneu45quote] = seq match {
      case node: scala.xml.Node => Right(generated.Composizioneu45quote(scala.collection.immutable.ListMap(List(
        (node \ "@c-tipo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-tipo" -> _ },
        (node \ "@tipo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@tipo" -> _ },
        (node \ "@n").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@n" -> _ },
        (node \ "@c-valuta").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-valuta" -> _ },
        (node \ "@valuta").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@valuta" -> _ },
        (node \ "@valore-nominale").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@valore-nominale" -> _ },
        (node \ "@n-azioni").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@n-azioni" -> _ },
        (node \ "@n-quote").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@n-quote" -> _ },
        (node \ "@valore-unitario").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@valore-unitario" -> _ },
        (node \ "@ammontare-convertito-in-euro").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ammontare-convertito-in-euro" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Composizioneu45quote, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@c-tipo", _) => __obj.cu45tipo foreach { x => attr = scala.xml.Attribute(null, "c-tipo", x.toString, attr) }
        case ("@tipo", _) => __obj.tipo foreach { x => attr = scala.xml.Attribute(null, "tipo", x.toString, attr) }
        case ("@n", _) => __obj.n foreach { x => attr = scala.xml.Attribute(null, "n", x.toString, attr) }
        case ("@c-valuta", _) => __obj.cu45valuta foreach { x => attr = scala.xml.Attribute(null, "c-valuta", x.toString, attr) }
        case ("@valuta", _) => __obj.valuta foreach { x => attr = scala.xml.Attribute(null, "valuta", x.toString, attr) }
        case ("@valore-nominale", _) => __obj.valoreu45nominale foreach { x => attr = scala.xml.Attribute(null, "valore-nominale", x.toString, attr) }
        case ("@n-azioni", _) => __obj.nu45azioni foreach { x => attr = scala.xml.Attribute(null, "n-azioni", x.toString, attr) }
        case ("@n-quote", _) => __obj.nu45quote foreach { x => attr = scala.xml.Attribute(null, "n-quote", x.toString, attr) }
        case ("@valore-unitario", _) => __obj.valoreu45unitario foreach { x => attr = scala.xml.Attribute(null, "valore-unitario", x.toString, attr) }
        case ("@ammontare-convertito-in-euro", _) => __obj.ammontareu45convertitou45inu45euro foreach { x => attr = scala.xml.Attribute(null, "ammontare-convertito-in-euro", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Composizioneu45quote, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultGenerated_DeliberatoFormat extends scalaxb.XMLFormat[generated.Deliberato] with scalaxb.CanWriteChildNodes[generated.Deliberato] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Deliberato] = seq match {
      case node: scala.xml.Node => Right(generated.Deliberato(scala.collection.immutable.ListMap(List(
        (node \ "@ammontare").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ammontare" -> _ },
        (node \ "@ammontare-convertito-in-euro").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ammontare-convertito-in-euro" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Deliberato, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@ammontare", _) => __obj.ammontare foreach { x => attr = scala.xml.Attribute(null, "ammontare", x.toString, attr) }
        case ("@ammontare-convertito-in-euro", _) => __obj.ammontareu45convertitou45inu45euro foreach { x => attr = scala.xml.Attribute(null, "ammontare-convertito-in-euro", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Deliberato, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultGenerated_DescrizioniFormat extends scalaxb.ElemNameParser[generated.Descrizioni] {
    val targetNamespace: Option[String] = None
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Descrizioni] =
      phrase(optTextRecord ~ 
      (safeRep(scalaxb.ElemName(None, "descrizione")) ^^ 
      (_.toSeq map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord ^^
      { case p1 ~ p2 ~ p3 =>
      generated.Descrizioni(Seq.concat(p1.toList,
        p2,
        p3.toList)) })
    
    def writesChildNodes(__obj: generated.Descrizioni, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultGenerated_Dirittou45partecipazioneFormat extends scalaxb.ElemNameParser[generated.Dirittou45partecipazione] {
    val targetNamespace: Option[String] = None
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Dirittou45partecipazione] =
      phrase(optTextRecord ^^
      { case p1 =>
      generated.Dirittou45partecipazione(Seq.concat(p1.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@c-tipo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-tipo" -> _ },
        (node \ "@tipo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@tipo" -> _ },
        (node \ "@frazione-numeratore").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@frazione-numeratore" -> _ },
        (node \ "@frazione-denominatore").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@frazione-denominatore" -> _ },
        (node \ "@percentuale").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@percentuale" -> _ },
        (node \ "@c-valuta").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-valuta" -> _ },
        (node \ "@valuta").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@valuta" -> _ },
        (node \ "@valore").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@valore" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated.Dirittou45partecipazione, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@c-tipo", _) => __obj.cu45tipo foreach { x => attr = scala.xml.Attribute(null, "c-tipo", x.toString, attr) }
        case ("@tipo", _) => __obj.tipo foreach { x => attr = scala.xml.Attribute(null, "tipo", x.toString, attr) }
        case ("@frazione-numeratore", _) => __obj.frazioneu45numeratore foreach { x => attr = scala.xml.Attribute(null, "frazione-numeratore", x.toString, attr) }
        case ("@frazione-denominatore", _) => __obj.frazioneu45denominatore foreach { x => attr = scala.xml.Attribute(null, "frazione-denominatore", x.toString, attr) }
        case ("@percentuale", _) => __obj.percentuale foreach { x => attr = scala.xml.Attribute(null, "percentuale", x.toString, attr) }
        case ("@c-valuta", _) => __obj.cu45valuta foreach { x => attr = scala.xml.Attribute(null, "c-valuta", x.toString, attr) }
        case ("@valuta", _) => __obj.valuta foreach { x => attr = scala.xml.Attribute(null, "valuta", x.toString, attr) }
        case ("@valore", _) => __obj.valore foreach { x => attr = scala.xml.Attribute(null, "valore", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Dirittou45partecipazione, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultGenerated_Duratau45societaFormat extends scalaxb.ElemNameParser[generated.Duratau45societa] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Duratau45societa] =
      phrase(opt(scalaxb.ElemName(None, "scadenza-esercizi")) ^^
      { case p1 =>
      generated.Duratau45societa(p1.headOption map { scalaxb.fromXML[generated.Scadenzau45esercizi](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@dt-termine").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@dt-termine" -> _ },
        (node \ "@f-durata-indeterminata").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@f-durata-indeterminata" -> _ },
        (node \ "@c-tipo-proroga").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-tipo-proroga" -> _ },
        (node \ "@tipo-proroga").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@tipo-proroga" -> _ },
        (node \ "@n-anni-proroga-tacita").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@n-anni-proroga-tacita" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated.Duratau45societa, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@dt-termine", _) => __obj.dtu45termine foreach { x => attr = scala.xml.Attribute(null, "dt-termine", x.toString, attr) }
        case ("@f-durata-indeterminata", _) => __obj.fu45duratau45indeterminata foreach { x => attr = scala.xml.Attribute(null, "f-durata-indeterminata", x.toString, attr) }
        case ("@c-tipo-proroga", _) => __obj.cu45tipou45proroga foreach { x => attr = scala.xml.Attribute(null, "c-tipo-proroga", x.toString, attr) }
        case ("@tipo-proroga", _) => __obj.tipou45proroga foreach { x => attr = scala.xml.Attribute(null, "tipo-proroga", x.toString, attr) }
        case ("@n-anni-proroga-tacita", _) => __obj.nu45anniu45prorogau45tacita foreach { x => attr = scala.xml.Attribute(null, "n-anni-proroga-tacita", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Duratau45societa, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.scadenzau45esercizi map { scalaxb.toXML[generated.Scadenzau45esercizi](_, None, Some("scadenza-esercizi"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated_Elencou45sociFormat extends scalaxb.ElemNameParser[generated.Elencou45soci] {
    val targetNamespace: Option[String] = None
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Elencou45soci] =
      phrase(optTextRecord ~ 
      safeRep((((opt(scalaxb.ElemName(None, "riquadri")) ^^ 
      (_ map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated.Riquadri](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 => Seq.concat(p1.toList,
        p2.toList) })) ~ 
      optTextRecord ^^
      { case p1 ~ p2 ~ p3 =>
      generated.Elencou45soci(Seq.concat(p1.toList,
        p2.flatten,
        p3.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@dt-soci-titolari-al").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@dt-soci-titolari-al" -> _ },
        (node \ "@f-consorzio").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@f-consorzio" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated.Elencou45soci, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@dt-soci-titolari-al", _) => __obj.dtu45sociu45titolariu45al foreach { x => attr = scala.xml.Attribute(null, "dt-soci-titolari-al", x.toString, attr) }
        case ("@f-consorzio", _) => __obj.fu45consorzio foreach { x => attr = scala.xml.Attribute(null, "f-consorzio", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Elencou45soci, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultGenerated_Estremiu45nascitaFormat extends scalaxb.XMLFormat[generated.Estremiu45nascita] with scalaxb.CanWriteChildNodes[generated.Estremiu45nascita] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Estremiu45nascita] = seq match {
      case node: scala.xml.Node => Right(generated.Estremiu45nascita(scala.collection.immutable.ListMap(List(
        (node \ "@dt").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@dt" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Estremiu45nascita, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@dt", _) => __obj.dt foreach { x => attr = scala.xml.Attribute(null, "dt", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Estremiu45nascita, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultGenerated_Fondou45consortileFormat extends scalaxb.ElemNameParser[generated.Fondou45consortile] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Fondou45consortile] =
      phrase(opt(scalaxb.ElemName(None, "descrizioni")) ^^
      { case p1 =>
      generated.Fondou45consortile(p1.headOption map { scalaxb.fromXML[generated.Descrizioni](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@c-valuta").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-valuta" -> _ },
        (node \ "@valuta").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@valuta" -> _ },
        (node \ "@ammontare").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ammontare" -> _ },
        (node \ "@ammontare-convertito-in-euro").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ammontare-convertito-in-euro" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated.Fondou45consortile, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@c-valuta", _) => __obj.cu45valuta foreach { x => attr = scala.xml.Attribute(null, "c-valuta", x.toString, attr) }
        case ("@valuta", _) => __obj.valuta foreach { x => attr = scala.xml.Attribute(null, "valuta", x.toString, attr) }
        case ("@ammontare", _) => __obj.ammontare foreach { x => attr = scala.xml.Attribute(null, "ammontare", x.toString, attr) }
        case ("@ammontare-convertito-in-euro", _) => __obj.ammontareu45convertitou45inu45euro foreach { x => attr = scala.xml.Attribute(null, "ammontare-convertito-in-euro", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Fondou45consortile, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.descrizioni map { scalaxb.toXML[generated.Descrizioni](_, None, Some("descrizioni"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated_Formau45amministrativaFormat extends scalaxb.XMLFormat[generated.Formau45amministrativa] with scalaxb.CanWriteChildNodes[generated.Formau45amministrativa] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Formau45amministrativa] = seq match {
      case node: scala.xml.Node => Right(generated.Formau45amministrativa(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@c").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c" -> _ },
        (node \ "@f-in-carica").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@f-in-carica" -> _ },
        (node \ "@f-organo-controllo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@f-organo-controllo" -> _ },
        (node \ "@n-min-amministratori").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@n-min-amministratori" -> _ },
        (node \ "@n-max-amministratori").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@n-max-amministratori" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Formau45amministrativa, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@c", _) => __obj.c foreach { x => attr = scala.xml.Attribute(null, "c", x.toString, attr) }
        case ("@f-in-carica", _) => __obj.fu45inu45carica foreach { x => attr = scala.xml.Attribute(null, "f-in-carica", x.toString, attr) }
        case ("@f-organo-controllo", _) => __obj.fu45organou45controllo foreach { x => attr = scala.xml.Attribute(null, "f-organo-controllo", x.toString, attr) }
        case ("@n-min-amministratori", _) => __obj.nu45minu45amministratori foreach { x => attr = scala.xml.Attribute(null, "n-min-amministratori", x.toString, attr) }
        case ("@n-max-amministratori", _) => __obj.nu45maxu45amministratori foreach { x => attr = scala.xml.Attribute(null, "n-max-amministratori", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Formau45amministrativa, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated_Formeu45amministrativeFormat extends scalaxb.ElemNameParser[generated.Formeu45amministrative] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Formeu45amministrative] =
      phrase(safeRep(scalaxb.ElemName(None, "forma-amministrativa")) ^^
      { case p1 =>
      generated.Formeu45amministrative(p1 map { scalaxb.fromXML[generated.Formau45amministrativa](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.Formeu45amministrative, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.formau45amministrativa flatMap { scalaxb.toXML[generated.Formau45amministrativa](_, None, Some("forma-amministrativa"), __scope, false) })

  }

  trait DefaultGenerated_Infou45attivitaFormat extends scalaxb.ElemNameParser[generated.Infou45attivita] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Infou45attivita] =
      phrase(opt(scalaxb.ElemName(None, "attivita-esercitata")) ~ 
      opt(scalaxb.ElemName(None, "attivita-secondaria-esercitata")) ~ 
      safeRep(scalaxb.ElemName(None, "classificazioni-ateco")) ~ 
      opt(scalaxb.ElemName(None, "attivita-prevalente")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated.Infou45attivita(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated.Classificazioniu45ateco](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated.Attivitau45prevalente](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@dt-inizio-attivita-impresa").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@dt-inizio-attivita-impresa" -> _ },
        (node \ "@dt-inizio").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@dt-inizio" -> _ },
        (node \ "@c-stato").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-stato" -> _ },
        (node \ "@stato").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@stato" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated.Infou45attivita, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@dt-inizio-attivita-impresa", _) => __obj.dtu45iniziou45attivitau45impresa foreach { x => attr = scala.xml.Attribute(null, "dt-inizio-attivita-impresa", x.toString, attr) }
        case ("@dt-inizio", _) => __obj.dtu45inizio foreach { x => attr = scala.xml.Attribute(null, "dt-inizio", x.toString, attr) }
        case ("@c-stato", _) => __obj.cu45stato foreach { x => attr = scala.xml.Attribute(null, "c-stato", x.toString, attr) }
        case ("@stato", _) => __obj.stato foreach { x => attr = scala.xml.Attribute(null, "stato", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Infou45attivita, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.attivitau45esercitata map { scalaxb.toXML[String](_, None, Some("attivita-esercitata"), __scope, false) } getOrElse {Nil},
        __obj.attivitau45secondariau45esercitata map { scalaxb.toXML[String](_, None, Some("attivita-secondaria-esercitata"), __scope, false) } getOrElse {Nil},
        __obj.classificazioniu45ateco flatMap { scalaxb.toXML[generated.Classificazioniu45ateco](_, None, Some("classificazioni-ateco"), __scope, false) },
        __obj.attivitau45prevalente map { scalaxb.toXML[generated.Attivitau45prevalente](_, None, Some("attivita-prevalente"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated_Infou45patrimonialiu45finanziarieFormat extends scalaxb.ElemNameParser[generated.Infou45patrimonialiu45finanziarie] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Infou45patrimonialiu45finanziarie] =
      phrase(opt(scalaxb.ElemName(None, "capitale-investito")) ~ 
      opt(scalaxb.ElemName(None, "fondo-consortile")) ~ 
      opt(scalaxb.ElemName(None, "valore-nominale-conferimenti")) ~ 
      opt(scalaxb.ElemName(None, "capitale-sociale")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated.Infou45patrimonialiu45finanziarie(p1.headOption map { scalaxb.fromXML[generated.Capitaleu45investito](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated.Fondou45consortile](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated.Valoreu45nominaleu45conferimenti](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated.Capitaleu45sociale](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.Infou45patrimonialiu45finanziarie, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.capitaleu45investito map { scalaxb.toXML[generated.Capitaleu45investito](_, None, Some("capitale-investito"), __scope, false) } getOrElse {Nil},
        __obj.fondou45consortile map { scalaxb.toXML[generated.Fondou45consortile](_, None, Some("fondo-consortile"), __scope, false) } getOrElse {Nil},
        __obj.valoreu45nominaleu45conferimenti map { scalaxb.toXML[generated.Valoreu45nominaleu45conferimenti](_, None, Some("valore-nominale-conferimenti"), __scope, false) } getOrElse {Nil},
        __obj.capitaleu45sociale map { scalaxb.toXML[generated.Capitaleu45sociale](_, None, Some("capitale-sociale"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated_Infou45statutoFormat extends scalaxb.ElemNameParser[generated.Infou45statuto] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Infou45statuto] =
      phrase(opt(scalaxb.ElemName(None, "durata-societa")) ^^
      { case p1 =>
      generated.Infou45statuto(p1.headOption map { scalaxb.fromXML[generated.Duratau45societa](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.Infou45statuto, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.duratau45societa map { scalaxb.toXML[generated.Duratau45societa](_, None, Some("durata-societa"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated_LicenzaFormat extends scalaxb.ElemNameParser[generated.Licenza] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Licenza] =
      phrase(opt(scalaxb.ElemName(None, "licenza-autorizzazione")) ^^
      { case p1 =>
      generated.Licenza(p1.headOption map { scalaxb.fromXML[generated.Licenzau45autorizzazione](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.Licenza, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.licenzau45autorizzazione map { scalaxb.toXML[generated.Licenzau45autorizzazione](_, None, Some("licenza-autorizzazione"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated_Licenzau45autorizzazioneFormat extends scalaxb.XMLFormat[generated.Licenzau45autorizzazione] with scalaxb.CanWriteChildNodes[generated.Licenzau45autorizzazione] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Licenzau45autorizzazione] = seq match {
      case node: scala.xml.Node => Right(generated.Licenzau45autorizzazione(scala.collection.immutable.ListMap(List(
        (node \ "@c-autorita-rilascio").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-autorita-rilascio" -> _ },
        (node \ "@autorita-rilascio").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@autorita-rilascio" -> _ },
        (node \ "@n").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@n" -> _ },
        (node \ "@dt-iscrizione").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@dt-iscrizione" -> _ },
        (node \ "@c").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c" -> _ },
        (node \ "@tipo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@tipo" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Licenzau45autorizzazione, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@c-autorita-rilascio", _) => __obj.cu45autoritau45rilascio foreach { x => attr = scala.xml.Attribute(null, "c-autorita-rilascio", x.toString, attr) }
        case ("@autorita-rilascio", _) => __obj.autoritau45rilascio foreach { x => attr = scala.xml.Attribute(null, "autorita-rilascio", x.toString, attr) }
        case ("@n", _) => __obj.n foreach { x => attr = scala.xml.Attribute(null, "n", x.toString, attr) }
        case ("@dt-iscrizione", _) => __obj.dtu45iscrizione foreach { x => attr = scala.xml.Attribute(null, "dt-iscrizione", x.toString, attr) }
        case ("@c", _) => __obj.c foreach { x => attr = scala.xml.Attribute(null, "c", x.toString, attr) }
        case ("@tipo", _) => __obj.tipo foreach { x => attr = scala.xml.Attribute(null, "tipo", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Licenzau45autorizzazione, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultGenerated_LicenzeFormat extends scalaxb.ElemNameParser[generated.Licenze] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Licenze] =
      phrase(safeRep(scalaxb.ElemName(None, "licenza")) ^^
      { case p1 =>
      generated.Licenze(p1 map { scalaxb.fromXML[generated.Licenza](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.Licenze, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.licenza flatMap { scalaxb.toXML[generated.Licenza](_, None, Some("licenza"), __scope, false) })

  }

  trait DefaultGenerated_LocalizzazioneFormat extends scalaxb.ElemNameParser[generated.Localizzazione] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Localizzazione] =
      phrase(opt(scalaxb.ElemName(None, "sotto-tipi")) ~ 
      opt(scalaxb.ElemName(None, "indirizzo-localizzazione")) ~ 
      opt(scalaxb.ElemName(None, "sede-fuori-provincia")) ~ 
      opt(scalaxb.ElemName(None, "attivita-esercitata")) ~ 
      opt(scalaxb.ElemName(None, "attivita-secondaria-esercitata")) ~ 
      safeRep(scalaxb.ElemName(None, "classificazioni-ateco")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated.Localizzazione(p1.headOption map { scalaxb.fromXML[generated.Sottou45tipi](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated.Indirizzou45localizzazione](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated.Sedeu45fuoriu45provincia](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated.Classificazioniu45ateco](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@progressivo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@progressivo" -> _ },
        (node \ "@c-tipo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-tipo" -> _ },
        (node \ "@tipo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@tipo" -> _ },
        (node \ "@dt-apertura").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@dt-apertura" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated.Localizzazione, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@progressivo", _) => __obj.progressivo foreach { x => attr = scala.xml.Attribute(null, "progressivo", x.toString, attr) }
        case ("@c-tipo", _) => __obj.cu45tipo foreach { x => attr = scala.xml.Attribute(null, "c-tipo", x.toString, attr) }
        case ("@tipo", _) => __obj.tipo foreach { x => attr = scala.xml.Attribute(null, "tipo", x.toString, attr) }
        case ("@dt-apertura", _) => __obj.dtu45apertura foreach { x => attr = scala.xml.Attribute(null, "dt-apertura", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Localizzazione, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.sottou45tipi map { scalaxb.toXML[generated.Sottou45tipi](_, None, Some("sotto-tipi"), __scope, false) } getOrElse {Nil},
        __obj.indirizzou45localizzazione map { scalaxb.toXML[generated.Indirizzou45localizzazione](_, None, Some("indirizzo-localizzazione"), __scope, false) } getOrElse {Nil},
        __obj.sedeu45fuoriu45provincia map { scalaxb.toXML[generated.Sedeu45fuoriu45provincia](_, None, Some("sede-fuori-provincia"), __scope, false) } getOrElse {Nil},
        __obj.attivitau45esercitata map { scalaxb.toXML[String](_, None, Some("attivita-esercitata"), __scope, false) } getOrElse {Nil},
        __obj.attivitau45secondariau45esercitata map { scalaxb.toXML[String](_, None, Some("attivita-secondaria-esercitata"), __scope, false) } getOrElse {Nil},
        __obj.classificazioniu45ateco flatMap { scalaxb.toXML[generated.Classificazioniu45ateco](_, None, Some("classificazioni-ateco"), __scope, false) })

  }

  trait DefaultGenerated_LocalizzazioniFormat extends scalaxb.ElemNameParser[generated.Localizzazioni] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Localizzazioni] =
      phrase(safeRep(scalaxb.ElemName(None, "localizzazione")) ^^
      { case p1 =>
      generated.Localizzazioni(p1 map { scalaxb.fromXML[generated.Localizzazione](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.Localizzazioni, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.localizzazione flatMap { scalaxb.toXML[generated.Localizzazione](_, None, Some("localizzazione"), __scope, false) })

  }

  trait DefaultGenerated_PersonaFormat extends scalaxb.ElemNameParser[generated.Persona] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Persona] =
      phrase(opt(scalaxb.ElemName(None, "persona-fisica")) ~ 
      opt(scalaxb.ElemName(None, "persona-giuridica")) ~ 
      opt(scalaxb.ElemName(None, "atti-conferimento-cariche")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated.Persona(p1.headOption map { scalaxb.fromXML[generated.Personau45fisica](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated.Personau45giuridica](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated.Attiu45conferimentou45cariche](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@progressivo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@progressivo" -> _ },
        (node \ "@f-rappresentante-rea").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@f-rappresentante-rea" -> _ },
        (node \ "@f-rappresentante-ri").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@f-rappresentante-ri" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated.Persona, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@progressivo", _) => __obj.progressivo foreach { x => attr = scala.xml.Attribute(null, "progressivo", x.toString, attr) }
        case ("@f-rappresentante-rea", _) => __obj.fu45rappresentanteu45rea foreach { x => attr = scala.xml.Attribute(null, "f-rappresentante-rea", x.toString, attr) }
        case ("@f-rappresentante-ri", _) => __obj.fu45rappresentanteu45ri foreach { x => attr = scala.xml.Attribute(null, "f-rappresentante-ri", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Persona, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.personau45fisica map { scalaxb.toXML[generated.Personau45fisica](_, None, Some("persona-fisica"), __scope, false) } getOrElse {Nil},
        __obj.personau45giuridica map { scalaxb.toXML[generated.Personau45giuridica](_, None, Some("persona-giuridica"), __scope, false) } getOrElse {Nil},
        __obj.attiu45conferimentou45cariche map { scalaxb.toXML[generated.Attiu45conferimentou45cariche](_, None, Some("atti-conferimento-cariche"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated_Personau45fisicaFormat extends scalaxb.ElemNameParser[generated.Personau45fisica] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Personau45fisica] =
      phrase(opt(scalaxb.ElemName(None, "estremi-nascita")) ^^
      { case p1 =>
      generated.Personau45fisica(p1.headOption map { scalaxb.fromXML[generated.Estremiu45nascita](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@cognome").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@cognome" -> _ },
        (node \ "@nome").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@nome" -> _ },
        (node \ "@c-fiscale").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-fiscale" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated.Personau45fisica, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@cognome", _) => __obj.cognome foreach { x => attr = scala.xml.Attribute(null, "cognome", x.toString, attr) }
        case ("@nome", _) => __obj.nome foreach { x => attr = scala.xml.Attribute(null, "nome", x.toString, attr) }
        case ("@c-fiscale", _) => __obj.cu45fiscale foreach { x => attr = scala.xml.Attribute(null, "c-fiscale", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Personau45fisica, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.estremiu45nascita map { scalaxb.toXML[generated.Estremiu45nascita](_, None, Some("estremi-nascita"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated_Personau45giuridicaFormat extends scalaxb.XMLFormat[generated.Personau45giuridica] with scalaxb.CanWriteChildNodes[generated.Personau45giuridica] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Personau45giuridica] = seq match {
      case node: scala.xml.Node => Right(generated.Personau45giuridica(scala.collection.immutable.ListMap(List(
        (node \ "@denominazione").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@denominazione" -> _ },
        (node \ "@c-fiscale").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-fiscale" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Personau45giuridica, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@denominazione", _) => __obj.denominazione foreach { x => attr = scala.xml.Attribute(null, "denominazione", x.toString, attr) }
        case ("@c-fiscale", _) => __obj.cu45fiscale foreach { x => attr = scala.xml.Attribute(null, "c-fiscale", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Personau45giuridica, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultGenerated_Personeu45sedeFormat extends scalaxb.ElemNameParser[generated.Personeu45sede] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Personeu45sede] =
      phrase(safeRep(scalaxb.ElemName(None, "persona")) ^^
      { case p1 =>
      generated.Personeu45sede(p1 map { scalaxb.fromXML[generated.Persona](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.Personeu45sede, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.persona flatMap { scalaxb.toXML[generated.Persona](_, None, Some("persona"), __scope, false) })

  }

  trait DefaultGenerated_Poteriu45personaFormat extends scalaxb.XMLFormat[generated.Poteriu45persona] with scalaxb.CanWriteChildNodes[generated.Poteriu45persona] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Poteriu45persona] = seq match {
      case node: scala.xml.Node => Right(generated.Poteriu45persona(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@p-poteri").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@p-poteri" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Poteriu45persona, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@p-poteri", _) => __obj.pu45poteri foreach { x => attr = scala.xml.Attribute(null, "p-poteri", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Poteriu45persona, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated_Praticau45soggettiu45controllantiFormat extends scalaxb.ElemNameParser[generated.Praticau45soggettiu45controllanti] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Praticau45soggettiu45controllanti] =
      phrase(opt(scalaxb.ElemName(None, "soggetti-controllanti")) ^^
      { case p1 =>
      generated.Praticau45soggettiu45controllanti(p1.headOption map { scalaxb.fromXML[generated.Soggettiu45controllanti](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.Praticau45soggettiu45controllanti, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.soggettiu45controllanti map { scalaxb.toXML[generated.Soggettiu45controllanti](_, None, Some("soggetti-controllanti"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated_Praticheu45soggettiu45controllantiFormat extends scalaxb.ElemNameParser[generated.Praticheu45soggettiu45controllanti] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Praticheu45soggettiu45controllanti] =
      phrase(safeRep(scalaxb.ElemName(None, "pratica-soggetti-controllanti")) ^^
      { case p1 =>
      generated.Praticheu45soggettiu45controllanti(p1 map { scalaxb.fromXML[generated.Praticau45soggettiu45controllanti](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.Praticheu45soggettiu45controllanti, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.praticau45soggettiu45controllanti flatMap { scalaxb.toXML[generated.Praticau45soggettiu45controllanti](_, None, Some("pratica-soggetti-controllanti"), __scope, false) })

  }

  trait DefaultGenerated_RiquadriFormat extends scalaxb.ElemNameParser[generated.Riquadri] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Riquadri] =
      phrase(safeRep(scalaxb.ElemName(None, "riquadro")) ^^
      { case p1 =>
      generated.Riquadri(p1 map { scalaxb.fromXML[generated.Riquadro](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.Riquadri, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.riquadro flatMap { scalaxb.toXML[generated.Riquadro](_, None, Some("riquadro"), __scope, false) })

  }

  trait DefaultGenerated_Riquadriu45trasferimentoFormat extends scalaxb.ElemNameParser[generated.Riquadriu45trasferimento] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Riquadriu45trasferimento] =
      phrase(safeRep(scalaxb.ElemName(None, "riquadro-trasferimento")) ^^
      { case p1 =>
      generated.Riquadriu45trasferimento(p1 map { scalaxb.fromXML[generated.Riquadrou45trasferimento](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.Riquadriu45trasferimento, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.riquadrou45trasferimento flatMap { scalaxb.toXML[generated.Riquadrou45trasferimento](_, None, Some("riquadro-trasferimento"), __scope, false) })

  }

  trait DefaultGenerated_RiquadroFormat extends scalaxb.ElemNameParser[generated.Riquadro] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Riquadro] =
      phrase(opt(scalaxb.ElemName(None, "composizione-quote")) ~ 
      opt(scalaxb.ElemName(None, "titolari")) ^^
      { case p1 ~ p2 =>
      generated.Riquadro(p1.headOption map { scalaxb.fromXML[generated.Composizioneu45quote](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated.Titolari](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.Riquadro, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.composizioneu45quote map { scalaxb.toXML[generated.Composizioneu45quote](_, None, Some("composizione-quote"), __scope, false) } getOrElse {Nil},
        __obj.titolari map { scalaxb.toXML[generated.Titolari](_, None, Some("titolari"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated_Riquadrou45trasferimentoFormat extends scalaxb.ElemNameParser[generated.Riquadrou45trasferimento] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Riquadrou45trasferimento] =
      phrase(opt(scalaxb.ElemName(None, "composizione-quote")) ~ 
      opt(scalaxb.ElemName(None, "titolari")) ^^
      { case p1 ~ p2 =>
      generated.Riquadrou45trasferimento(p1.headOption map { scalaxb.fromXML[generated.Composizioneu45quote](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated.Titolari](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.Riquadrou45trasferimento, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.composizioneu45quote map { scalaxb.toXML[generated.Composizioneu45quote](_, None, Some("composizione-quote"), __scope, false) } getOrElse {Nil},
        __obj.titolari map { scalaxb.toXML[generated.Titolari](_, None, Some("titolari"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated_Ruoliu45ridottiFormat extends scalaxb.ElemNameParser[generated.Ruoliu45ridotti] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Ruoliu45ridotti] =
      phrase(safeRep(scalaxb.ElemName(None, "ruolo-ridotto")) ^^
      { case p1 =>
      generated.Ruoliu45ridotti(p1 map { scalaxb.fromXML[generated.Ruolou45ridotto](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.Ruoliu45ridotti, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ruolou45ridotto flatMap { scalaxb.toXML[generated.Ruolou45ridotto](_, None, Some("ruolo-ridotto"), __scope, false) })

  }

  trait DefaultGenerated_Ruolou45ridottoFormat extends scalaxb.ElemNameParser[generated.Ruolou45ridotto] {
    val targetNamespace: Option[String] = None
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Ruolou45ridotto] =
      phrase(optTextRecord ^^
      { case p1 =>
      generated.Ruolou45ridotto(Seq.concat(p1.toList),
        scala.collection.immutable.ListMap(List(
        (node \ "@c-tipo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-tipo" -> _ },
        (node \ "@tipo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@tipo" -> _ },
        (node \ "@n").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@n" -> _ },
        (node \ "@data").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@data" -> _ },
        (node \ "@c-ente-rilascio").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-ente-rilascio" -> _ },
        (node \ "@ente-rilascio").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ente-rilascio" -> _ },
        (node \ "@provincia").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@provincia" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated.Ruolou45ridotto, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@c-tipo", _) => __obj.cu45tipo foreach { x => attr = scala.xml.Attribute(null, "c-tipo", x.toString, attr) }
        case ("@tipo", _) => __obj.tipo foreach { x => attr = scala.xml.Attribute(null, "tipo", x.toString, attr) }
        case ("@n", _) => __obj.n foreach { x => attr = scala.xml.Attribute(null, "n", x.toString, attr) }
        case ("@data", _) => __obj.data foreach { x => attr = scala.xml.Attribute(null, "data", x.toString, attr) }
        case ("@c-ente-rilascio", _) => __obj.cu45enteu45rilascio foreach { x => attr = scala.xml.Attribute(null, "c-ente-rilascio", x.toString, attr) }
        case ("@ente-rilascio", _) => __obj.enteu45rilascio foreach { x => attr = scala.xml.Attribute(null, "ente-rilascio", x.toString, attr) }
        case ("@provincia", _) => __obj.provincia foreach { x => attr = scala.xml.Attribute(null, "provincia", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Ruolou45ridotto, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultGenerated_Scadenzau45eserciziFormat extends scalaxb.XMLFormat[generated.Scadenzau45esercizi] with scalaxb.CanWriteChildNodes[generated.Scadenzau45esercizi] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Scadenzau45esercizi] = seq match {
      case node: scala.xml.Node => Right(generated.Scadenzau45esercizi(scala.collection.immutable.ListMap(List(
        (node \ "@dt-primo-esercizio").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@dt-primo-esercizio" -> _ },
        (node \ "@esercizi-successivi").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@esercizi-successivi" -> _ },
        (node \ "@mesi-proroga-bilancio").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@mesi-proroga-bilancio" -> _ },
        (node \ "@giorni-proroga-bilancio").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@giorni-proroga-bilancio" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Scadenzau45esercizi, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@dt-primo-esercizio", _) => __obj.dtu45primou45esercizio foreach { x => attr = scala.xml.Attribute(null, "dt-primo-esercizio", x.toString, attr) }
        case ("@esercizi-successivi", _) => __obj.eserciziu45successivi foreach { x => attr = scala.xml.Attribute(null, "esercizi-successivi", x.toString, attr) }
        case ("@mesi-proroga-bilancio", _) => __obj.mesiu45prorogau45bilancio foreach { x => attr = scala.xml.Attribute(null, "mesi-proroga-bilancio", x.toString, attr) }
        case ("@giorni-proroga-bilancio", _) => __obj.giorniu45prorogau45bilancio foreach { x => attr = scala.xml.Attribute(null, "giorni-proroga-bilancio", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Scadenzau45esercizi, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultGenerated_Scrittau45pcou45sFormat extends scalaxb.XMLFormat[generated.Scrittau45pcou45s] with scalaxb.CanWriteChildNodes[generated.Scrittau45pcou45s] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Scrittau45pcou45s] = seq match {
      case node: scala.xml.Node => Right(generated.Scrittau45pcou45s(scala.collection.immutable.ListMap(List(
        (node \ "@f-presenza-pco-s").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@f-presenza-pco-s" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Scrittau45pcou45s, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@f-presenza-pco-s", _) => __obj.fu45presenzau45pcou45s foreach { x => attr = scala.xml.Attribute(null, "f-presenza-pco-s", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Scrittau45pcou45s, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultGenerated_Sedeu45fuoriu45provinciaFormat extends scalaxb.XMLFormat[generated.Sedeu45fuoriu45provincia] with scalaxb.CanWriteChildNodes[generated.Sedeu45fuoriu45provincia] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Sedeu45fuoriu45provincia] = seq match {
      case node: scala.xml.Node => Right(generated.Sedeu45fuoriu45provincia(scala.collection.immutable.ListMap(List(
        (node \ "@n-rea").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@n-rea" -> _ },
        (node \ "@n-rd").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@n-rd" -> _ },
        (node \ "@cciaa").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@cciaa" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Sedeu45fuoriu45provincia, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@n-rea", _) => __obj.nu45rea foreach { x => attr = scala.xml.Attribute(null, "n-rea", x.toString, attr) }
        case ("@n-rd", _) => __obj.nu45rd foreach { x => attr = scala.xml.Attribute(null, "n-rd", x.toString, attr) }
        case ("@cciaa", _) => __obj.cciaa foreach { x => attr = scala.xml.Attribute(null, "cciaa", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Sedeu45fuoriu45provincia, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultGenerated_Sistemau45amministrazioneFormat extends scalaxb.XMLFormat[generated.Sistemau45amministrazione] with scalaxb.CanWriteChildNodes[generated.Sistemau45amministrazione] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Sistemau45amministrazione] = seq match {
      case node: scala.xml.Node => Right(generated.Sistemau45amministrazione(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@c").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Sistemau45amministrazione, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@c", _) => __obj.c foreach { x => attr = scala.xml.Attribute(null, "c", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Sistemau45amministrazione, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated_Soggettiu45controllantiFormat extends scalaxb.ElemNameParser[generated.Soggettiu45controllanti] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Soggettiu45controllanti] =
      phrase(safeRep(scalaxb.ElemName(None, "soggetto-controllante")) ^^
      { case p1 =>
      generated.Soggettiu45controllanti(p1 map { scalaxb.fromXML[generated.Soggettou45controllante](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.Soggettiu45controllanti, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.soggettou45controllante flatMap { scalaxb.toXML[generated.Soggettou45controllante](_, None, Some("soggetto-controllante"), __scope, false) })

  }

  trait DefaultGenerated_Soggettou45controllanteFormat extends scalaxb.XMLFormat[generated.Soggettou45controllante] with scalaxb.CanWriteChildNodes[generated.Soggettou45controllante] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Soggettou45controllante] = seq match {
      case node: scala.xml.Node => Right(generated.Soggettou45controllante(scala.collection.immutable.ListMap(List(
        (node \ "@denominazione").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@denominazione" -> _ },
        (node \ "@c-fiscale").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-fiscale" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Soggettou45controllante, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@denominazione", _) => __obj.denominazione foreach { x => attr = scala.xml.Attribute(null, "denominazione", x.toString, attr) }
        case ("@c-fiscale", _) => __obj.cu45fiscale foreach { x => attr = scala.xml.Attribute(null, "c-fiscale", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Soggettou45controllante, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultGenerated_Soggettou45controllou45contabileFormat extends scalaxb.XMLFormat[generated.Soggettou45controllou45contabile] with scalaxb.CanWriteChildNodes[generated.Soggettou45controllou45contabile] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Soggettou45controllou45contabile] = seq match {
      case node: scala.xml.Node => Right(generated.Soggettou45controllou45contabile(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@c").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Soggettou45controllou45contabile, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@c", _) => __obj.c foreach { x => attr = scala.xml.Attribute(null, "c", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Soggettou45controllou45contabile, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated_Sottou45tipiFormat extends scalaxb.ElemNameParser[generated.Sottou45tipi] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Sottou45tipi] =
      phrase(safeRep(scalaxb.ElemName(None, "sotto-tipo")) ^^
      { case p1 =>
      generated.Sottou45tipi(p1 map { scalaxb.fromXML[generated.Sottou45tipo](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.Sottou45tipi, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.sottou45tipo flatMap { scalaxb.toXML[generated.Sottou45tipo](_, None, Some("sotto-tipo"), __scope, false) })

  }

  trait DefaultGenerated_Sottou45tipoFormat extends scalaxb.XMLFormat[generated.Sottou45tipo] with scalaxb.CanWriteChildNodes[generated.Sottou45tipo] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Sottou45tipo] = seq match {
      case node: scala.xml.Node => Right(generated.Sottou45tipo(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@c").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Sottou45tipo, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@c", _) => __obj.c foreach { x => attr = scala.xml.Attribute(null, "c", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Sottou45tipo, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated_SottoscrittoFormat extends scalaxb.XMLFormat[generated.Sottoscritto] with scalaxb.CanWriteChildNodes[generated.Sottoscritto] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Sottoscritto] = seq match {
      case node: scala.xml.Node => Right(generated.Sottoscritto(scala.collection.immutable.ListMap(List(
        (node \ "@ammontare").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ammontare" -> _ },
        (node \ "@ammontare-convertito-in-euro").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ammontare-convertito-in-euro" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Sottoscritto, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@ammontare", _) => __obj.ammontare foreach { x => attr = scala.xml.Attribute(null, "ammontare", x.toString, attr) }
        case ("@ammontare-convertito-in-euro", _) => __obj.ammontareu45convertitou45inu45euro foreach { x => attr = scala.xml.Attribute(null, "ammontare-convertito-in-euro", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Sottoscritto, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultGenerated_TitolareFormat extends scalaxb.ElemNameParser[generated.Titolare] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Titolare] =
      phrase((scalaxb.ElemName(None, "anagrafica-titolare")) ~ 
      opt(scalaxb.ElemName(None, "diritto-partecipazione")) ^^
      { case p1 ~ p2 =>
      generated.Titolare(scalaxb.fromXML[generated.Anagraficau45titolare](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated.Dirittou45partecipazione](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@c-situazione").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-situazione" -> _ },
        (node \ "@situazione").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@situazione" -> _ },
        (node \ "@c-tipo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-tipo" -> _ },
        (node \ "@tipo").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@tipo" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated.Titolare, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@c-situazione", _) => __obj.cu45situazione foreach { x => attr = scala.xml.Attribute(null, "c-situazione", x.toString, attr) }
        case ("@situazione", _) => __obj.situazione foreach { x => attr = scala.xml.Attribute(null, "situazione", x.toString, attr) }
        case ("@c-tipo", _) => __obj.cu45tipo foreach { x => attr = scala.xml.Attribute(null, "c-tipo", x.toString, attr) }
        case ("@tipo", _) => __obj.tipo foreach { x => attr = scala.xml.Attribute(null, "tipo", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Titolare, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated.Anagraficau45titolare](__obj.anagraficau45titolare, None, Some("anagrafica-titolare"), __scope, false),
        __obj.dirittou45partecipazione map { scalaxb.toXML[generated.Dirittou45partecipazione](_, None, Some("diritto-partecipazione"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated_TitolariFormat extends scalaxb.ElemNameParser[generated.Titolari] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Titolari] =
      phrase(safeRep(scalaxb.ElemName(None, "titolare")) ^^
      { case p1 =>
      generated.Titolari(p1 map { scalaxb.fromXML[generated.Titolare](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.Titolari, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.titolare flatMap { scalaxb.toXML[generated.Titolare](_, None, Some("titolare"), __scope, false) })

  }

  trait DefaultGenerated_Trasferimentiu45quoteFormat extends scalaxb.ElemNameParser[generated.Trasferimentiu45quote] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Trasferimentiu45quote] =
      phrase(safeRep(scalaxb.ElemName(None, "trasferimento-quote")) ^^
      { case p1 =>
      generated.Trasferimentiu45quote(p1 map { scalaxb.fromXML[generated.Trasferimentou45quote](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@f-successivi-ultimo-es").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@f-successivi-ultimo-es" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated.Trasferimentiu45quote, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@f-successivi-ultimo-es", _) => __obj.fu45successiviu45ultimou45es foreach { x => attr = scala.xml.Attribute(null, "f-successivi-ultimo-es", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Trasferimentiu45quote, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.trasferimentou45quote flatMap { scalaxb.toXML[generated.Trasferimentou45quote](_, None, Some("trasferimento-quote"), __scope, false) })

  }

  trait DefaultGenerated_Trasferimentou45quoteFormat extends scalaxb.ElemNameParser[generated.Trasferimentou45quote] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated.Trasferimentou45quote] =
      phrase(opt(scalaxb.ElemName(None, "riquadri-trasferimento")) ^^
      { case p1 =>
      generated.Trasferimentou45quote(p1.headOption map { scalaxb.fromXML[generated.Riquadriu45trasferimento](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated.Trasferimentou45quote, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.riquadriu45trasferimento map { scalaxb.toXML[generated.Riquadriu45trasferimento](_, None, Some("riquadri-trasferimento"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated_Valoreu45nominaleu45conferimentiFormat extends scalaxb.XMLFormat[generated.Valoreu45nominaleu45conferimenti] with scalaxb.CanWriteChildNodes[generated.Valoreu45nominaleu45conferimenti] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Valoreu45nominaleu45conferimenti] = seq match {
      case node: scala.xml.Node => Right(generated.Valoreu45nominaleu45conferimenti(scala.collection.immutable.ListMap(List(
        (node \ "@c-valuta").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@c-valuta" -> _ },
        (node \ "@valuta").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@valuta" -> _ },
        (node \ "@ammontare").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ammontare" -> _ },
        (node \ "@ammontare-convertito-in-euro").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ammontare-convertito-in-euro" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Valoreu45nominaleu45conferimenti, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@c-valuta", _) => __obj.cu45valuta foreach { x => attr = scala.xml.Attribute(null, "c-valuta", x.toString, attr) }
        case ("@valuta", _) => __obj.valuta foreach { x => attr = scala.xml.Attribute(null, "valuta", x.toString, attr) }
        case ("@ammontare", _) => __obj.ammontare foreach { x => attr = scala.xml.Attribute(null, "ammontare", x.toString, attr) }
        case ("@ammontare-convertito-in-euro", _) => __obj.ammontareu45convertitou45inu45euro foreach { x => attr = scala.xml.Attribute(null, "ammontare-convertito-in-euro", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Valoreu45nominaleu45conferimenti, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultGenerated_VersatoFormat extends scalaxb.XMLFormat[generated.Versato] with scalaxb.CanWriteChildNodes[generated.Versato] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated.Versato] = seq match {
      case node: scala.xml.Node => Right(generated.Versato(scala.collection.immutable.ListMap(List(
        (node \ "@ammontare").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ammontare" -> _ },
        (node \ "@ammontare-convertito-in-euro").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ammontare-convertito-in-euro" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated.Versato, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@ammontare", _) => __obj.ammontare foreach { x => attr = scala.xml.Attribute(null, "ammontare", x.toString, attr) }
        case ("@ammontare-convertito-in-euro", _) => __obj.ammontareu45convertitou45inu45euro foreach { x => attr = scala.xml.Attribute(null, "ammontare-convertito-in-euro", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated.Versato, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }


}

